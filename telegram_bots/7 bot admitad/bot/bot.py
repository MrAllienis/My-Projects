import logging
import asyncio
import random
import traceback
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from message import get_coupons, load_template_coupon, load_template_products, create_message, create_product, get_advcampaigns_for_website2
from db_con import delete_shop, select_from_db, get_image_xlsx, select_products, delete_coupon_from_db, update_used_coupon, delete_old_coupons, select_tasks, update_used_product
from datetime import datetime, timedelta, time



ADMIN_CHAT_ID = [7010151873, 751638794]
API_TOKEN = '7213960854:AAEu2p1xDs5HjaZ5wKpMq2GxZ-9mfPku8zI'
CHANNEL_ID = '-1002210052557'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ MY
# CHANNEL_ID = '-1002202725655'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞

max_posts_per_day = 355
posts_count = 0
next_reset_time = datetime.combine(datetime.now().date() + timedelta(days=1), time(0, 0))

scheduler = AsyncIOScheduler()


day_time1 = 10
day_time2 = 22

class Form(StatesGroup):
    change_interval = State()
    change_time1 = State()  # State for day_time1
    change_time2 = State() # State for day_time2
    delete_shop = State()
    post = State()
    post_product = State()

interval = 180*60

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

stop_event = asyncio.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

dp.middleware.setup(LoggingMiddleware())
admin_kb = InlineKeyboardMarkup(row_width=1)
btn_post = InlineKeyboardButton('üì© –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data='admin_post')
btn_post_prod = InlineKeyboardButton('üì© –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data='admin_post_product')
btn_stats = InlineKeyboardButton(' ‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º üé≤', callback_data='admin_coupon')
btn_message = InlineKeyboardButton('‚úâÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Å—Ç —Å —Ç–æ–≤–∞—Ä–æ–º üé≤', callback_data='admin_prod')
btn_users = InlineKeyboardButton('üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='admin_auto')
btn_delete = InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data='admin_delete_shop')
admin_kb.add(btn_post, btn_post_prod, btn_stats, btn_message, btn_users, btn_delete)


async def on_startup(dispatcher):
    # await bot.send_message(7010151873,'–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... ')
    # try:
    #     messages_for_delete, text = get_coupons()
    #     await bot.send_message(7010151873, text)
    #     for message in messages_for_delete.values():
    #         if (message[0] and message[1]) is not None:
    #             await bot.delete_message(message[0], message[1])
    # except:
    #     print('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    # try:
    #     old_messages = delete_old_coupons()
    #     for mes in old_messages:
    #         try:
    #             await bot.delete_message(mes[0], mes[1])
    #         except:
    #             print('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ')
    # except Exception as e:
    #     print(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - {e}')
    # try:
    #     tasks_for_delete = select_tasks()
    #     for task in tasks_for_delete:
    #         print(f'–ü–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {task[2]}')
    #         asyncio.create_task(delete_post_at(bot, task[0], task[1], task[2], task[3]))
    #     print('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    # except Exception as e:
    #     print(f'–û—à–∏–±–∫–∞. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - {e}')
    # try:
    #     products_for_delete, not_rub = get_advcampaigns_for_website2()
    #     for product in products_for_delete:
    #         await bot.delete_message(product[0], product[1])
    #     print(not_rub)
    #
    # except Exception as e:
    #     print('–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞')
    await bot.send_message(7010151873, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞')











# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
    )

    await message.answer(welcome_text)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.chat.id in ADMIN_CHAT_ID:
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('admin_'))
async def admin_callback_handler(callback_query: CallbackQuery):
    data = callback_query.data
    if data == 'admin_prod':
        image, message, id = create_product()
        while message == '':
            image, message, id = create_product()
        else:
            await send_product_to_channel(image, message, id)

    elif data == 'admin_coupon':
        image, message, endtime, coupon_id = create_message()
        while message == '':
            image, message, endtime, coupon_id = create_message()
        else:
            await send_message_to_channel(image, message, endtime, coupon_id)

    elif data == 'admin_auto':
        keyboard = schedule_keyboard()
        await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=keyboard)

    elif data == 'admin_delete_shop':
        await Form.delete_shop.set()  # Set the state
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")

    elif data == 'admin_post':
        await Form.post.set()  # Set the state
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

    elif data == 'admin_post_product':
        await Form.post_product.set()  # Set the state
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")

    else:
        await bot.answer_callback_query(callback_query.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data and c.data == 'back')
async def back_callback_handler(callback_query: CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",  reply_markup=admin_kb)
    await bot.answer_callback_query(callback_query.id)



@dp.callback_query_handler(lambda c: c.data == 'start_posts')
async def start_posts_callback(callback_query: types.CallbackQuery):
    stop_event.clear()
    global day_time1, day_time2
    # if day_time1 <= datetime.now().hour+3 < day_time2:
    global interval
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ {interval/60} –º–∏–Ω—É—Ç –Ω–∞—á–∞—Ç–∞.")
    asyncio.create_task(reset_posts_count_daily())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞
    asyncio.create_task(start_posts_interval())
    # else:
    #     await bot.send_message(callback_query.from_user.id, f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å {day_time1} –¥–æ {day_time2} —á–∞—Å–æ–≤.")


@dp.callback_query_handler(lambda c: c.data == 'end_posts')
async def end_posts_callback(callback_query: types.CallbackQuery):
    stop_event.set()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")




@dp.message_handler(state=Form.delete_shop)
async def process_delete_shop(message: types.Message, state: FSMContext):
    try:
        messages_for_delete = delete_shop(message.text)
        if messages_for_delete is False:
            await message.answer('–¢–∞–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        else:
            await message.answer('–ú–∞–≥–∞–∑–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã')
            for mes in messages_for_delete:
                try:
                    if (mes[0] and mes[1]) is not None:
                        await bot.delete_message(mes[0], mes[1])
                except:
                    pass
            await message.answer('–ú–∞–≥–∞–∑–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞')
    except:
        await message.answer('–û—à–∏–±–∫–∞')
    finally:
        await state.finish()



@dp.message_handler(state=Form.post)
async def process_delete_shop(message: types.Message, state: FSMContext):
    try:
        image, post, endtime, coupon_id = create_message(admin_post=message.text)
        await send_message_to_channel(image, post, endtime, coupon_id)
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    except:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    finally:
        await state.finish()


@dp.message_handler(state=Form.post_product)
async def process_delete_shop(message: types.Message, state: FSMContext):
    try:
        image_p, message_p, id = create_product(post_link=message.text)
        await send_product_to_channel(image_p, message_p, id)
        await message.answer('–¢–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    except:
        await message.answer('–¢–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Å—ã–ª–∫—É')
    finally:
        await state.finish()




@dp.callback_query_handler(lambda c: c.data == 'change_interval')
async def change_interval_callback(callback_query: types.CallbackQuery):
    await Form.change_interval.set()  # Set the state
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:")


# Message handler for processing the interval change
@dp.message_handler(state=Form.change_interval)
async def process_interval(message: types.Message, state: FSMContext):
    try:
        global interval
        interval = int(message.text)*60
        await message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ {message.text} –º–∏–Ω—É—Ç', reply_markup=schedule_keyboard())
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')
    finally:
        await state.finish()  # Finish the state




@dp.callback_query_handler(lambda c: c.data == 'change_time')
async def change_time_callback(callback_query: types.CallbackQuery):
    await Form.change_time1.set()  # Set the state for day_time1
    await bot.send_message(callback_query.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤:")

# Message handler for processing day_time1
@dp.message_handler(state=Form.change_time1)
async def process_time1(message: types.Message, state: FSMContext):
    global day_time1
    try:
        day_time1 = int(message.text)
        if 1 <= day_time1 < 16:
            await message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ - {day_time1}:00')
            await Form.change_time2.set()  # Set the state for day_time2
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤:")
        else:
            await message.answer('–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 15, –∏ –º–µ–Ω—å—à–µ 1, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')

# Message handler for processing day_time2
@dp.message_handler(state=Form.change_time2)
async def process_time2(message: types.Message, state: FSMContext):
    global day_time2
    try:
        day_time2 = int(message.text)
        if 23 >= day_time2 >= 16:
            await message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ - {day_time2}:00', reply_markup=schedule_keyboard())
        else:
            await message.answer('–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 16, –∏ –±–æ–ª—å—à–µ 23, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.')
    finally:
        await state.finish()  # Finish the state



def schedule_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    interval_button = InlineKeyboardButton('‚ÜîÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤', callback_data='change_interval')
    start = InlineKeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤', callback_data='start_posts')
    end = InlineKeyboardButton('‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤', callback_data='end_posts')
    time = InlineKeyboardButton('üï∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data='change_time')
    back = InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
    keyboard.add(start, end, interval_button, time, back)
    return keyboard



# async def periodic_loading():
#     print('–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞')
#     await bot.send_message(7010151873, '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è')
#
#     try:
#         messages_for_delete = get_coupons()
#         for message in messages_for_delete.values():
#             if (message[0] and message[1]) is not None:
#                 await bot.delete_message(message[0], message[1])
#     except Exception as e:
#         print('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', e)
#
#     try:
#         products_for_delete, not_rub = get_advcampaigns_for_website2()
#         for product in products_for_delete:
#             await bot.delete_message(product[0], product[1])
#         print(not_rub)
#     except Exception as e:
#         print('–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', e)
#
#     print('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω')
#     await bot.send_message(7010151873, '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω')




async def reset_posts_count_daily():
    global posts_count, next_reset_time
    while True:
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –≤ –ø–æ–ª–Ω–æ—á—å
        now = datetime.now()
        if now >= next_reset_time:
            posts_count = 0
            next_reset_time = datetime.combine(now.date() + timedelta(days=1), time(0, 0))
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥



async def delete_post_at(bot, chat_id, message_id, delete_time, coupon_id):
    now = datetime.now().astimezone()
    delay = (delete_time - now).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)
        await bot.delete_message(chat_id, message_id)
        await delete_coupon_from_db(coupon_id)


async def start_posts_interval():
    global interval, posts_count, day_time1, day_time2
    while not stop_event.is_set():
        if posts_count < max_posts_per_day:
            # if day_time1 <= datetime.now().hour + 3 < day_time2:
            image, message, endtime, coupon_id = create_message()
            while message == '':
                image, message, endtime, coupon_id = create_message()
            await send_message_to_channel(image, message, endtime, coupon_id)
            posts_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

            if posts_count >= max_posts_per_day:
                await bot.send_message(7010151873, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. ({max_posts_per_day})")

        # await asyncio.sleep(interval+(random.randint(-30, 30))*60)
        await asyncio.sleep(10)

        # if posts_count < max_posts_per_day:
        #     # if day_time1 <= datetime.now().hour + 3 < day_time2:
        #     image_p, message_p, id = create_product()
        #     while message_p == '':
        #         image_p, message_p, id = create_product()
        #     await send_product_to_channel(image_p, message_p, id)
        #     posts_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        #
        #     if posts_count >= max_posts_per_day:
        #         await bot.send_message(7010151873, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. ({max_posts_per_day})")
        #
        # # await asyncio.sleep(interval+(random.randint(-30, 30))*60)
        # await asyncio.sleep(10)

        if posts_count < max_posts_per_day:
            # if day_time1 <= datetime.now().hour + 3 < day_time2:
            image, message, endtime, coupon_id = create_message(promo=True)
            while message == '':
                image, message, endtime, coupon_id = create_message(promo=True)
            await send_message_to_channel(image, message, endtime, coupon_id)
            posts_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

            if posts_count >= max_posts_per_day:
                await bot.send_message(7010151873, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. ({max_posts_per_day})")

        # await asyncio.sleep(interval+(random.randint(-30, 30))*60)
        await asyncio.sleep(10)

async def send_product_to_channel(image, message, id):
    try:
        with open(image, 'rb') as photo:
            msg = await bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=message, parse_mode='HTML')
    except Exception as e:
        await asyncio.sleep(10)
        print(e)
        traceback.print_exc()
        msg = await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode='HTML', disable_web_page_preview=True)
    update_used_product(id, CHANNEL_ID, msg.message_id)



async def send_message_to_channel(image, message, endtime, coupon_id):
    try:
        with open(image, 'rb') as photo:
            msg = await bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=message, parse_mode='HTML')
    except Exception as e:
        await asyncio.sleep(10)
        print(e)
        traceback.print_exc()
        msg = await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode='HTML', disable_web_page_preview=True)
    update_used_coupon(coupon_id, CHANNEL_ID, msg.message_id)
    if endtime is not None:
        delete_time = endtime
        print(f'–ü–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {delete_time}')
        # await bot.send_message(7010151873, f'–ü–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {delete_time}')
        # await bot.send_message(751638794, f'–ü–æ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {delete_time}')
        asyncio.create_task(delete_post_at(bot, CHANNEL_ID, msg.message_id, delete_time, coupon_id))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
