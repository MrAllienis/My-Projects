from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

API_TOKEN = '6887289745:AAFqXwtC_QSdAPXW2AguedZsBJ5cmKLTvcQ'
web_app_url = "https://www.skidki186.ru/shops_products"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
CHANNEL_ID = '-1002202725655'


async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if await check_subscription(user_id):
        welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ."
        web_app_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=types.WebAppInfo(url=web_app_url))
        keyboard = InlineKeyboardMarkup().add(web_app_button)
        await message.answer(welcome_text, reply_markup=keyboard)
    else:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        subscribe_button = InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ‚úÖ", url="https://t.me/+meJdp3-tCTUxZjky")
        check_button = InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="check_subscription")
        keyboard = InlineKeyboardMarkup().add(subscribe_button).add(check_button)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤, –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def process_subscription_check(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        await bot.answer_callback_query(callback_query.id)
        welcome_text = "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã:"
        web_app_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=types.WebAppInfo(url=web_app_url))
        keyboard = InlineKeyboardMarkup().add(web_app_button)
        await bot.send_message(callback_query.from_user.id, welcome_text, reply_markup=keyboard)
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.", show_alert=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)